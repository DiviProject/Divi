TESTS += test/test_divi
bin_PROGRAMS += test/test_divi
TEST_SRCDIR = test
TEST_BINARY=test/test_divi$(EXEEXT)

JSON_TEST_FILES = \
  test/data/script_valid.json \
  test/data/base58_keys_valid.json \
  test/data/sig_canonical.json \
  test/data/sig_noncanonical.json \
  test/data/base58_encode_decode.json \
  test/data/base58_keys_invalid.json \
  test/data/script_invalid.json \
  test/data/tx_invalid.json \
  test/data/tx_valid.json \
  test/data/sighash.json

RAW_TEST_FILES = test/data/alertTests.raw

GENERATED_TEST_FILES = $(JSON_TEST_FILES:.json=.json.h) $(RAW_TEST_FILES:.raw=.raw.h)

BITCOIN_TESTS =\
  test/allocator_tests.cpp \
  test/BareTxid_tests.cpp \
  test/base32_tests.cpp \
  test/base58_tests.cpp \
  test/base64_tests.cpp \
  test/BIP9ActivationManager_tests.cpp \
  test/BlockSignature_tests.cpp \
  test/CachedBIP9ActivationStateTracker_tests.cpp \
  test/coins_tests.cpp \
  test/compress_tests.cpp \
  test/crypto_tests.cpp \
  test/DoS_tests.cpp \
  test/FakeMerkleTxConfirmationNumberCalculator.cpp \
  test/FakeBlockIndexChain.cpp \
  test/FakeWallet.cpp \
  test/ForkActivation_tests.cpp \
  test/Settings_tests.cpp \
  test/hash_tests.cpp \
  test/kernel_tests.cpp \
  test/key_tests.cpp \
  test/main_tests.cpp \
  test/mempool_tests.cpp \
  test/MockFileSystem.cpp \
  test/MockUtxoBalanceCalculator.h \
  test/MockCoinMinter.h \
  test/MockSpentOutputTracker.h \
  test/MockUtxoOwnershipDetector.h \
  test/MockMerkleTxConfirmationNumberCalculator.h \
  test/MockSuperblockHeightValidator.h \
  test/MockBlockIncentivesPopulator.h \
  test/MockBlockSubsidyProvider.h \
  test/MockTransactionRecord.h \
  test/MockPoSStakeModifierService.h \
  test/MockVaultManagerDatabase.h \
  test/Monthlywalletbackupcreator_tests.cpp \
  test/ActiveMasternode_tests.cpp \
  test/FilteredBoostFileSystem_tests.cpp \
  test/mruset_tests.cpp \
  test/multisig_tests.cpp \
  test/netbase_tests.cpp \
  test/pmt_tests.cpp \
  test/rpc_tests.cpp \
  test/sanity_tests.cpp \
  test/script_CLTV_tests.cpp \
  test/script_P2SH_tests.cpp \
  test/script_tests.cpp \
  test/serialize_tests.cpp \
  test/sighash_tests.cpp \
  test/sigopcount_tests.cpp \
  test/skiplist_tests.cpp \
  test/SignatureSizeEstimation_tests.cpp \
  test/SuperblockHelper_tests.cpp \
  test/RandomCScriptGenerator.h \
  test/RandomCScriptGenerator.cpp \
  test/RandomScriptPubKeyGenerator.h \
  test/RandomTransactionGenerator.h \
  test/RandomUtxoGenerator.h \
  test/test_divi.cpp \
  test/timedata_tests.cpp \
  test/torcontrol_tests.cpp \
  test/transaction_tests.cpp \
  test/uint256_tests.cpp \
  test/univalue_tests.cpp \
  test/util_tests.cpp \
  test/versionbits_tests.cpp \
  test/googletestenabled_test.cpp \
  test/wallet_coinmanagement_tests.cpp \
  test/UtxoBalanceCalculator_tests.cpp \
  test/FilteredTransactionsCalculator_tests.cpp \
  test/walletbackupcreator_tests.cpp \
  test/WalletIntegrityVerifier_tests.cpp \
  test/CoinMinting_tests.cpp \
  test/ProofOfStake_tests.cpp \
  test/IsMine_tests.cpp \
  test/InventoryTypes_tests.cpp \
  test/PoSStakeModifierService_tests.cpp \
  test/PoSTransactionCreator_tests.cpp \
  test/LegacyPoSStakeModifierService_tests.cpp \
  test/LotteryWinnersCalculatorTests.cpp \
  test/VaultManager_tests.cpp \
  test/multi_wallet_tests.cpp \
  test/MockSignatureSizeEstimator.h \
  test/MinimumFeeCoinSelectionAlgorithm_tests.cpp \
  test/WalletDB_tests.cpp \
  test/ZmqNotifierFactory_tests.cpp

if ENABLE_WALLET
BITCOIN_TESTS += \
  test/wallet_tests.cpp \
  test/rpc_wallet_tests.cpp
endif

test_test_divi_SOURCES = $(BITCOIN_TESTS) $(JSON_TEST_FILES) $(RAW_TEST_FILES)
test_test_divi_CPPFLAGS = $(BITCOIN_INCLUDES) -isystem $(builddir)/GMock/googlemock/include -isystem $(builddir)/GMock/googletest/include -I$(builddir)/test/ $(TESTDEFS)
test_test_divi_LDADD = $(LIBBITCOIN_SERVER) $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CRYPTO) $(LIBBITCOIN_UNIVALUE) $(LIBBITCOIN_ZEROCOIN)
if ENABLE_WALLET
test_test_divi_LDADD += $(LIBBITCOIN_WALLET)
endif
test_test_divi_LDADD += $(LIBLEVELDB) $(LIBMEMENV) \
  $(BOOST_LIBS) $(BOOST_UNIT_TEST_FRAMEWORK_LIB) $(LIBSECP256K1) $(EVENT_LIBS) $(EVENT_PTHREADS_LIBS) $(LIBGMOCK) \
  $(LIBBITCOIN_CONSENSUS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS)
test_test_divi_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS) -static

if ENABLE_ZMQ
test_test_divi_LDADD += $(LIBBITCOIN_ZMQ) $(ZMQ_LIBS)
endif

nodist_test_test_divi_SOURCES = $(GENERATED_TEST_FILES)

$(BITCOIN_TESTS): $(GENERATED_TEST_FILES)

CLEAN_BITCOIN_TEST = test/*.gcda test/*.gcno $(GENERATED_TEST_FILES)

CLEANFILES += $(CLEAN_BITCOIN_TEST)

divi_test: $(TEST_BINARY)

divi_test_check: $(TEST_BINARY) FORCE
	$(MAKE) check-TESTS TESTS=$^

divi_test_clean : FORCE
	rm -f $(CLEAN_BITCOIN_TEST) $(test_test_divi_OBJECTS) $(TEST_BINARY)

check-local:
	$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C secp256k1 check

%.json.h: %.json
	@$(MKDIR_P) $(@D)
	@echo "namespace json_tests{" > $@
	@echo "static unsigned const char $(*F)[] = {" >> $@
	@$(HEXDUMP) -v -e '8/1 "0x%02x, "' -e '"\n"' $< | $(SED) -e 's/0x  ,//g' >> $@
	@echo "};};" >> $@
	@echo "Generated $@"

%.raw.h: %.raw
	@$(MKDIR_P) $(@D)
	@echo "namespace alert_tests{" > $@
	@echo "static unsigned const char $(*F)[] = {" >> $@
	@$(HEXDUMP) -v -e '8/1 "0x%02x, "' -e '"\n"' $< | $(SED) -e 's/0x  ,//g' >> $@
	@echo "};};" >> $@
	@echo "Generated $@"
